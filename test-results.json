{
  "summary": {
    "timestamp": "2025-09-16T14:03:01.852Z",
    "totalDuration": 1347,
    "total": 6,
    "passed": 3,
    "failed": 3,
    "skipped": 0,
    "successRate": 50
  },
  "testSuites": [
    {
      "name": "Setup Tests",
      "status": "PASS",
      "duration": 13,
      "details": "Completed successfully"
    },
    {
      "name": "Authentication Tests",
      "status": "FAIL",
      "duration": 1133,
      "details": "\ntests/auth.test.ts:\n(pass) Authentication System > JWT Utilities > should generate valid JWT tokens [32.00ms]\n(pass) Authentication System > JWT Utilities > should reject invalid tokens [2.00ms]\n(pass) Authentication System > JWT Utilities > should extract tokens from authorization headers\n(pass) Authentication System > Password Utilities > should hash and verify passwords correctly [632.00ms]\n67 | \n68 |     it(\"should validate password strength\", () => {\n69 |       const { validatePasswordStrength } = require(\"../src/utils/password\");\n70 | \n71 |       // Valid passwords\n72 |       expect(validatePasswordStrength(\"TestPass123!\")).toBe(true);\n                                                            ^\nerror: expect(received).toBe(expected)\n\nExpected: true\nReceived: {\n  isValid: true,\n  errors: [],\n}\n\n      at <anonymous> (/home/haya-noor/Headless-Document-Management-System/tests/auth.test.ts:72:56)\n(fail) Authentication System > Password Utilities > should validate password strength\n 99 |       };\n100 | \n101 |       const userService = new UserService(mockUserRepository);\n102 |       const userData = testUtils.generateTestUser();\n103 | \n104 |       const result = await userService.register(userData, {});\n                                             ^\nTypeError: userService.register is not a function. (In 'userService.register(userData, {})', 'userService.register' is undefined)\n      at <anonymous> (/home/haya-noor/Headless-Document-Management-System/tests/auth.test.ts:104:40)\n      at <anonymous> (/home/haya-noor/Headless-Document-Management-System/tests/auth.test.ts:85:38)\n(fail) Authentication System > User Service > should register a new user [25.00ms]\n119 |       };\n120 | \n121 |       const userService = new UserService(mockUserRepository);\n122 |       const userData = testUtils.generateTestUser();\n123 | \n124 |       const result = await userService.register(userData, {});\n                                             ^\nTypeError: userService.register is not a function. (In 'userService.register(userData, {})', 'userService.register' is undefined)\n      at <anonymous> (/home/haya-noor/Headless-Document-Management-System/tests/auth.test.ts:124:40)\n      at <anonymous> (/home/haya-noor/Headless-Document-Management-System/tests/auth.test.ts:112:59)\n(fail) Authentication System > User Service > should reject registration with duplicate email\n142 |         updateLastLogin: async () => {},\n143 |       };\n144 | \n145 |       const userService = new UserService(mockUserRepository);\n146 | \n147 |       const result = await userService.login({\n                                             ^\nTypeError: new UserService({\n        findByEmail: async () => ({\n          ...mocks.mockDbResponses.user,\n          password: hashedPassword\n        }),\n        updateLastLogin: async () => {}\n      }).login is not a function. (In 'new UserService({\n        findByEmail: async () => ({\n          ...mocks.mockDbResponses.user,\n          password: hashedPassword\n        }),\n        updateLastLogin: async () => {}\n      }).login({\n        email: \"test@example.com\",\n        password: \"TestPass123!\"\n      }, {})', 'new UserService({\n        findByEmail: async () => ({\n          ...mocks.mockDbResponses.user,\n          password: hashedPassword\n        }),\n        updateLastLogin: async () => {}\n      }).login' is undefined)\n      at <anonymous> (/home/haya-noor/Headless-Document-Management-System/tests/auth.test.ts:147:40)\n(fail) Authentication System > User Service > should login with valid credentials [209.00ms]\n161 |         findByEmail: async () => null, // User not found\n162 |       };\n163 | \n164 |       const userService = new UserService(mockUserRepository);\n165 | \n166 |       const result = await userService.login({\n                                             ^\nTypeError: new UserService({\n        findByEmail: async () => null\n      }).login is not a function. (In 'new UserService({\n        findByEmail: async () => null\n      }).login({\n        email: \"nonexistent@example.com\",\n        password: \"TestPass123!\"\n      }, {})', 'new UserService({\n        findByEmail: async () => null\n      }).login' is undefined)\n      at <anonymous> (/home/haya-noor/Headless-Document-Management-System/tests/auth.test.ts:166:40)\n      at <anonymous> (/home/haya-noor/Headless-Document-Management-System/tests/auth.test.ts:157:56)\n(fail) Authentication System > User Service > should reject login with invalid credentials\n(pass) Authentication System > Authentication Schemas > should validate registration data [6.00ms]\n(pass) Authentication System > Authentication Schemas > should reject invalid registration data\n(pass) Authentication System > Authentication Schemas > should validate login data\n233 |     };\n234 | \n235 |     const { UserService } = require(\"../src/services/user.service\");\n236 |     const userService = new UserService(mockRepository);\n237 | \n238 |     const result = await userService.register(userData, {});\n                                           ^\nTypeError: new UserService(mockRepository).register is not a function. (In 'new UserService(mockRepository).register(userData, {})', 'new UserService(mockRepository).register' is undefined)\n      at <anonymous> (/home/haya-noor/Headless-Document-Management-System/tests/auth.test.ts:238:38)\n      at <anonymous> (/home/haya-noor/Headless-Document-Management-System/tests/auth.test.ts:217:50)\n(fail) Authentication Integration > should handle complete registration flow\n263 |     };\n264 | \n265 |     const { UserService } = require(\"../src/services/user.service\");\n266 |     const userService = new UserService(mockRepository);\n267 | \n268 |     const result = await userService.login({\n                                           ^\nTypeError: new UserService(mockRepository).login is not a function. (In 'new UserService(mockRepository).login({\n      email: \"test@example.com\",\n      password: \"TestPass123!\"\n    }, {})', 'new UserService(mockRepository).login' is undefined)\n      at <anonymous> (/home/haya-noor/Headless-Document-Management-System/tests/auth.test.ts:268:38)\n(fail) Authentication Integration > should handle complete login flow [212.00ms]\n\n 7 pass\n 7 fail\n 22 expect() calls\nRan 14 tests across 1 file. [1128.00ms]\n"
    },
    {
      "name": "Document Management Tests",
      "status": "FAIL",
      "duration": 68,
      "details": "\ntests/documents.test.ts:\n(pass) Document Management System > Document Service > should upload a document successfully [14.00ms]\n(pass) Document Management System > Document Service > should get document with proper permissions [1.00ms]\n(pass) Document Management System > Document Service > should deny access to unauthorized document [1.00ms]\n(pass) Document Management System > Document Service > should search documents with filters\n(pass) Document Management System > Document Service > should update document metadata\n(pass) Document Management System > Document Service > should generate download link [1.00ms]\n(pass) Document Management System > Document Service > should manage document permissions\n(pass) Document Management System > Document Service > should delete document\n(pass) Document Management System > Document Repository > should implement CRUD operations [25.00ms]\n(pass) Document Management System > Document Repository > should validate search filters\n(pass) Document Management System > Document Schemas > should validate document upload data [7.00ms]\n(pass) Document Management System > Document Schemas > should validate document search parameters [1.00ms]\n422 |         userId: \"user-id-123\",\n423 |         permission: \"read\",\n424 |       };\n425 | \n426 |       const result = DocumentPermissionSchema.safeParse(validData);\n427 |       expect(result.success).toBe(true);\n                                   ^\nerror: expect(received).toBe(expected)\n\nExpected: true\nReceived: false\n\n      at <anonymous> (/home/haya-noor/Headless-Document-Management-System/tests/documents.test.ts:427:30)\n(fail) Document Management System > Document Schemas > should validate permission data [1.00ms]\n(pass) Document Management System > Document Schemas > should reject invalid permission data\n(pass) Document Management System > Document Versioning > should create document versions [1.00ms]\n(pass) Document Management System > Document Versioning > should validate version data\n(pass) Document Management System > Document Permissions > should manage permissions correctly\n(pass) Document Management System > Document Permissions > should validate permission types\n\n 17 pass\n 1 fail\n 48 expect() calls\nRan 18 tests across 1 file. [63.00ms]\n"
    },
    {
      "name": "Storage Tests",
      "status": "FAIL",
      "duration": 27,
      "details": "\ntests/storage.test.ts:\n(pass) Storage Service > Local Storage Service > should initialize storage directory [10.00ms]\n(pass) Storage Service > Local Storage Service > should generate unique file keys [1.00ms]\n41 |       const version = 2;\n42 | \n43 |       const versionKey = storage.generateVersionKey(baseKey, version);\n44 | \n45 |       expect(versionKey).toContain(\"v2\");\n46 |       expect(versionKey).toContain(baseKey);\n                              ^\nerror: expect(received).toContain(expected)\n\nExpected to contain: \"user-123/doc-456/document.pdf\"\nReceived: \"user-123/doc-456/versions/document_v2.pdf\"\n\n      at <anonymous> (/home/haya-noor/Headless-Document-Management-System/tests/storage.test.ts:46:26)\n(fail) Storage Service > Local Storage Service > should generate version-specific keys\n(pass) Storage Service > Local Storage Service > should create upload result with checksum\n72 |         url: `http://localhost:3001/download/${encodeURIComponent(key)}?filename=${filename}`,\n73 |         expiresIn,\n74 |         expiresAt: new Date(Date.now() + expiresIn * 1000),\n75 |       };\n76 | \n77 |       expect(downloadUrl.url).toContain(key);\n                                   ^\nerror: expect(received).toContain(expected)\n\nExpected to contain: \"test/document.pdf\"\nReceived: \"http://localhost:3001/download/test%2Fdocument.pdf?filename=custom-name.pdf\"\n\n      at <anonymous> (/home/haya-noor/Headless-Document-Management-System/tests/storage.test.ts:77:31)\n      at <anonymous> (/home/haya-noor/Headless-Document-Management-System/tests/storage.test.ts:65:41)\n(fail) Storage Service > Local Storage Service > should generate download URLs\n(pass) Storage Service > Local Storage Service > should handle file metadata\n(pass) Storage Service > Local Storage Service > should validate file operations [1.00ms]\n(pass) Storage Service > Storage Factory > should create local storage service by default\n(pass) Storage Service > Storage Factory > should return singleton instance\n(pass) Storage Service > Storage Factory > should throw error for unsupported providers\n(pass) Storage Service > Storage Factory > should throw error for S3 (not implemented)\n(pass) Storage Service > Storage Interface Compliance > should implement all required methods\n(pass) Storage Service > Storage Interface Compliance > should handle upload options correctly\n(pass) Storage Service > File Validation > should validate file upload data\n(pass) Storage Service > File Validation > should validate file size limits\n(pass) Storage Service > File Validation > should validate allowed file types\n(pass) Storage Service > File Validation > should reject invalid file types\n(pass) Storage Service > Storage Security > should sanitize file keys\n(pass) Storage Service > Storage Security > should generate secure checksums\n(pass) Storage Service > Storage Security > should handle file path validation [1.00ms]\n(pass) Storage Service > Storage Performance > should handle concurrent operations\n(pass) Storage Service > Storage Performance > should handle large file operations\n\n 20 pass\n 2 fail\n 70 expect() calls\nRan 22 tests across 1 file. [23.00ms]\n"
    },
    {
      "name": "Repository Tests",
      "status": "PASS",
      "duration": 56,
      "details": "Completed successfully"
    },
    {
      "name": "API Integration Tests",
      "status": "PASS",
      "duration": 50,
      "details": "Completed successfully"
    }
  ],
  "environment": {
    "runtime": "bun",
    "nodeEnv": "development",
    "platform": "linux",
    "arch": "x64"
  }
}